{"version":3,"sources":["angular-chart.js"],"names":["chart","type","restrict","scope","data","labels","options","series","colours","getColour","chartType","legend","click","link","elem","resetChart","newVal","isEmpty","destroy","createChart","container","document","createElement","className","replaceWith","appendChild","window","G_vmlCanvasManager","initElement","$watch","oldVal","length","Array","isArray","canUpdateChart","updateChart","$on","reduce","sum","carry","val","getRandomColour","getColours","cvs","ctx","getContext","getDataSets","getData","Chart","$emit","onclick","evt","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","$apply","setLegend","angular","copy","defaults","global","push","map","convertColour","colour","hexToRgb","substr","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","concat","join","datasets","item","i","dataSet","label","value","color","highlight","$parent","parent","$oldLegend","find","generateLegend","append","values","forEach","dataset","points","bars","dataItem","j","segments","segment","update","Object","keys","hex","bigint","parseInt","r","g","b","responsive","multiTooltipTemplate","module","directive"],"mappings":"CAAA,WACE,YAyEA,SAASA,GAAOC,GACd,OACEC,SAAU,KACVC,OACEC,KAAM,IACNC,OAAQ,IACRC,QAAS,IACTC,OAAQ,IACRC,QAAS,KACTC,UAAW,KACXC,UAAW,IACXC,OAAQ,IACRC,MAAO,KAETC,KAAM,SAAUV,EAAOW,GAwCrB,QAASC,GAAYC,GACnB,IAAIC,EAAQD,GAAZ,CACA,GAAIN,GAAYT,GAAQE,EAAMO,SACxBA,KAIFV,GAAOA,EAAMkB,UAEjBlB,EAAQmB,EAAYT,EAAWP,EAAOW,KAhDxC,GAAId,GAAOoB,EAAYC,SAASC,cAAc,MAC9CF,GAAUG,UAAY,kBACtBT,EAAKU,YAAYJ,GACjBA,EAAUK,YAAYX,EAAK,IAEc,gBAA9BY,QAAOC,oBAAiE,OAA9BD,OAAOC,oBACL,kBAA1CD,QAAOC,mBAAmBC,aACnCF,OAAOC,mBAAmBC,YAAYd,EAAK,IAI/CX,EAAM0B,OAAO,OAAQ,SAAUb,EAAQc,GACrC,GAAMd,GAAYA,EAAOe,UAAWC,MAAMC,QAAQjB,EAAO,KAASA,EAAO,GAAGe,QAA5E,CACA,GAAIrB,GAAYT,GAAQE,EAAMO,SAC9B,IAAMA,EAAN,CAEA,GAAIV,EAAO,CACT,GAAIkC,EAAelB,EAAQc,GAAS,MAAOK,GAAYnC,EAAOgB,EAAQb,EACtEH,GAAMkB,UAGRlB,EAAQmB,EAAYT,EAAWP,EAAOW,OACrC,GAEHX,EAAM0B,OAAO,SAAUd,GAAY,GACnCZ,EAAM0B,OAAO,SAAUd,GAAY,GACnCZ,EAAM0B,OAAO,UAAWd,GAAY,GACpCZ,EAAM0B,OAAO,UAAWd,GAAY,GAEpCZ,EAAM0B,OAAO,YAAa,SAAUb,GAC5BA,IACFhB,GAAOA,EAAMkB,UACjBlB,EAAQmB,EAAYH,EAAQb,EAAOW,MAGrCX,EAAMiC,IAAI,WAAY,WAChBpC,GAAOA,EAAMkB,cAkBzB,QAASgB,GAAelB,EAAQc,GAC9B,MAAId,IAAUc,GAAUd,EAAOe,QAAUD,EAAOC,OACvCC,MAAMC,QAAQjB,EAAO,IAC5BA,EAAOe,SAAWD,EAAOC,QAAUf,EAAO,GAAGe,SAAWD,EAAO,GAAGC,OAChED,EAAOO,OAAOC,EAAK,GAAK,EAAItB,EAAOe,SAAWD,EAAOC,QAAS,GAE3D,EAGT,QAASO,GAAKC,EAAOC,GACnB,MAAOD,GAAQC,EAGjB,QAASrB,GAAalB,EAAME,EAAOW,GACjC,GAAMX,EAAMC,MAAUD,EAAMC,KAAK2B,OAAjC,CACA5B,EAAMM,UAAuC,kBAApBN,GAAMM,UAA2BN,EAAMM,UAAYgC,EAC5EtC,EAAMK,QAAUkC,EAAWvC,EAC3B,IAAIwC,GAAM7B,EAAK,GAAI8B,EAAMD,EAAIE,WAAW,MACpCzC,EAAO4B,MAAMC,QAAQ9B,EAAMC,KAAK,IAClC0C,EAAY3C,EAAME,OAAQF,EAAMC,KAAMD,EAAMI,WAAcJ,EAAMK,SAChEuC,EAAQ5C,EAAME,OAAQF,EAAMC,KAAMD,EAAMK,SACtCR,EAAQ,GAAIgD,OAAMJ,GAAK3C,GAAMG,EAAMD,EAAMG,YAc7C,OAbAH,GAAM8C,MAAM,SAAUjD,GAClBG,EAAMS,QACR+B,EAAIO,QAAU,SAAUC,GACtB,GAAIvC,GAAQZ,EAAMoD,kBAAoBpD,EAAMqD,gBAAkBrD,EAAMsD,kBAEpE,IAAI1C,EAAO,CACT,GAAI2C,GAAe3C,EAAM4C,KAAKxD,EAAOmD,EACrChD,GAAMS,MAAM2C,EAAcJ,GAC1BhD,EAAMsD,YAIRtD,EAAMQ,QAA2B,UAAjBR,EAAMQ,QAAoB+C,EAAU5C,EAAMd,GACvDA,GAGT,QAAS0C,GAAYvC,GAEnB,IADA,GAAIK,GAAUL,EAAMK,SAAWmD,QAAQC,KAAKZ,MAAMa,SAASC,OAAOtD,SAC3DA,EAAQuB,OAAS5B,EAAMC,KAAK2B,QACjCvB,EAAQuD,KAAK5D,EAAMM,YAErB,OAAOD,GAAQwD,IAAIC,GAGrB,QAASA,GAAeC,GACtB,MAAsB,gBAAXA,IAAkC,OAAXA,EAAwBA,EACpC,gBAAXA,IAAqC,MAAdA,EAAO,GAAmBzD,EAAU0D,EAASD,EAAOE,OAAO,KACtF3B,IAGT,QAASA,KACP,GAAIyB,IAAUG,EAAa,EAAG,KAAMA,EAAa,EAAG,KAAMA,EAAa,EAAG,KAC1E,OAAO5D,GAAUyD,GAGnB,QAASzD,GAAWyD,GAClB,OACEI,UAAWC,EAAKL,EAAQ,IACxBM,YAAaD,EAAKL,EAAQ,GAC1BO,WAAYF,EAAKL,EAAQ,GACzBQ,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsBL,EAAKL,EAAQ,KAIvC,QAASG,GAAcQ,EAAKC,GAC1B,MAAOC,MAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGvD,QAASN,GAAKL,EAAQgB,GACpB,MAAO,QAAUhB,EAAOiB,OAAOD,GAAOE,KAAK,KAAO,IAGpD,QAAStC,GAAazC,EAAQD,EAAMG,EAAQC,GAC1C,OACEH,OAAQA,EACRgF,SAAUjF,EAAK4D,IAAI,SAAUsB,EAAMC,GACjC,GAAIC,GAAU7B,QAAQC,KAAKpD,EAAQ+E,GAGnC,OAFAC,GAAQC,MAAQlF,EAAOgF,GACvBC,EAAQpF,KAAOkF,EACRE,KAKb,QAASzC,GAAS1C,EAAQD,EAAMI,GAC9B,MAAOH,GAAO2D,IAAI,SAAUyB,EAAOF,GACjC,OACEE,MAAOA,EACPC,MAAOtF,EAAKmF,GACZI,MAAOnF,EAAQ+E,GAAGf,YAClBoB,UAAWpF,EAAQ+E,GAAGX,wBAK5B,QAASlB,GAAW5C,EAAMd,GACxB,GAAI6F,GAAU/E,EAAKgF,SACfC,EAAaF,EAAQG,KAAK,gBAC1BrF,EAAS,iBAAmBX,EAAMiG,iBAAmB,iBACrDF,GAAWhE,OAAQgE,EAAWvE,YAAYb,GACzCkF,EAAQK,OAAOvF,GAGtB,QAASwB,GAAanC,EAAOmG,EAAQhG,GAC/B6B,MAAMC,QAAQ9B,EAAMC,KAAK,IAC3BJ,EAAMqF,SAASe,QAAQ,SAAUC,EAASd,IACvCc,EAAQC,QAAUD,EAAQE,MAAMH,QAAQ,SAAUI,EAAUC,GAC3DD,EAASd,MAAQS,EAAOZ,GAAGkB,OAI/BzG,EAAM0G,SAASN,QAAQ,SAAUO,EAASpB,GACxCoB,EAAQjB,MAAQS,EAAOZ,KAG3BvF,EAAM4G,SACNzG,EAAM8C,MAAM,SAAUjD,GAGxB,QAASiB,GAASyE,GAChB,OAASA,GACN1D,MAAMC,QAAQyD,KAAYA,EAAM3D,QACf,gBAAV2D,KAAwBmB,OAAOC,KAAKpB,GAAO3D,OAIvD,QAASoC,GAAU4C,GACjB,GAAIC,GAASC,SAASF,EAAK,IACvBG,EAAKF,GAAU,GAAM,IACrBG,EAAKH,GAAU,EAAK,IACpBI,EAAa,IAATJ,CAER,QAAQE,EAAGC,EAAGC,GApRhBpE,MAAMa,SAASC,OAAOuD,YAAa,EACnCrE,MAAMa,SAASC,OAAOwD,qBAAuB,6DAE7CtE,MAAMa,SAASC,OAAOtD,UAElB8D,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,sBACXE,YAAa,oBACbC,WAAY,oBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,wBAGtBN,UAAW,uBACXE,YAAa,qBACbC,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,yBAGtBN,UAAW,uBACXE,YAAa,qBACbC,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,yBAGtBN,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,qBACXE,YAAa,mBACbC,WAAY,mBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,qBAI1BjB,QAAQ4D,OAAO,eACZC,UAAU,YAAa,WAAc,MAAOxH,OAC5CwH,UAAU,YAAa,WAAc,MAAOxH,GAAM,UAClDwH,UAAU,WAAY,WAAc,MAAOxH,GAAM,SACjDwH,UAAU,aAAc,WAAc,MAAOxH,GAAM,WACnDwH,UAAU,gBAAiB,WAAc,MAAOxH,GAAM,cACtDwH,UAAU,WAAY,WAAc,MAAOxH,GAAM,SACjDwH,UAAU,iBAAkB,WAAc,MAAOxH,GAAM","file":"angular-chart.js","sourcesContent":["(function () {\n  'use strict';\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n\n  Chart.defaults.global.colours = [\n    { // blue\n      fillColor: 'rgba(151,187,205,0.2)',\n      strokeColor: 'rgba(151,187,205,1)',\n      pointColor: 'rgba(151,187,205,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(151,187,205,0.8)'\n    },\n    { // light grey\n      fillColor: 'rgba(220,220,220,0.2)',\n      strokeColor: 'rgba(220,220,220,1)',\n      pointColor: 'rgba(220,220,220,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(220,220,220,0.8)'\n    },\n    { // red\n      fillColor: 'rgba(247,70,74,0.2)',\n      strokeColor: 'rgba(247,70,74,1)',\n      pointColor: 'rgba(247,70,74,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(247,70,74,0.8)'\n    },\n    { // green\n      fillColor: 'rgba(70,191,189,0.2)',\n      strokeColor: 'rgba(70,191,189,1)',\n      pointColor: 'rgba(70,191,189,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(70,191,189,0.8)'\n    },\n    { // yellow\n      fillColor: 'rgba(253,180,92,0.2)',\n      strokeColor: 'rgba(253,180,92,1)',\n      pointColor: 'rgba(253,180,92,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(253,180,92,0.8)'\n    },\n    { // grey\n      fillColor: 'rgba(148,159,177,0.2)',\n      strokeColor: 'rgba(148,159,177,1)',\n      pointColor: 'rgba(148,159,177,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(148,159,177,0.8)'\n    },\n    { // dark grey\n      fillColor: 'rgba(77,83,96,0.2)',\n      strokeColor: 'rgba(77,83,96,1)',\n      pointColor: 'rgba(77,83,96,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(77,83,96,1)'\n    }\n  ];\n\n  angular.module('chart.js', [])\n    .directive('chartBase', function () { return chart(); })\n    .directive('chartLine', function () { return chart('Line'); })\n    .directive('chartBar', function () { return chart('Bar'); })\n    .directive('chartRadar', function () { return chart('Radar'); })\n    .directive('chartDoughnut', function () { return chart('Doughnut'); })\n    .directive('chartPie', function () { return chart('Pie'); })\n    .directive('chartPolarArea', function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        colours: '=?',\n        getColour: '=?',\n        chartType: '=',\n        legend: '@',\n        click: '='\n      },\n      link: function (scope, elem/*, attrs */) {\n        var chart, container = document.createElement('div');\n        container.className = 'chart-container';\n        elem.replaceWith(container);\n        container.appendChild(elem[0]);\n\n        if (typeof window.G_vmlCanvasManager === 'object' && window.G_vmlCanvasManager !== null) {\n          if (typeof window.G_vmlCanvasManager.initElement === 'function') {\n            window.G_vmlCanvasManager.initElement(elem[0]);\n          }\n        }\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          if (chart) {\n            if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope);\n            chart.destroy();\n          }\n\n          chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('series', resetChart, true);\n        scope.$watch('labels', resetChart, true);\n        scope.$watch('options', resetChart, true);\n        scope.$watch('colours', resetChart, true);\n\n        scope.$watch('chartType', function (newVal/*, oldVal */) {\n          if (! newVal) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n\n        scope.$on('$destroy', function () {\n          if (chart) chart.destroy();\n        });\n\n        function resetChart (newVal/*, oldVal*/) {\n          if (isEmpty(newVal)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          // chart.update() doesn't work for series and labels\n          // so we have to re-create the chart entirely\n          if (chart) chart.destroy();\n\n          chart = createChart(chartType, scope, elem);\n        }\n      }\n    };\n  }\n\n  function canUpdateChart(newVal, oldVal) {\n    if (newVal && oldVal && newVal.length && oldVal.length) {\n      return Array.isArray(newVal[0]) ?\n      newVal.length === oldVal.length && newVal[0].length === oldVal[0].length :\n        oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n    }\n    return false;\n  }\n\n  function sum (carry, val) {\n    return carry + val;\n  }\n\n  function createChart (type, scope, elem) {\n    if (! scope.data || ! scope.data.length) return;\n    scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\n    scope.colours = getColours(scope);\n    var cvs = elem[0], ctx = cvs.getContext('2d');\n    var data = Array.isArray(scope.data[0]) ?\n      getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\n      getData(scope.labels, scope.data, scope.colours);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    scope.$emit('create', chart);\n    if (scope.click) {\n      cvs.onclick = function (evt) {\n        var click = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\n\n        if (click) {\n          var activePoints = click.call(chart, evt);\n          scope.click(activePoints, evt);\n          scope.$apply();\n        }\n      };\n    }\n    if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\n    return chart;\n  }\n\n  function getColours (scope) {\n    var colours = scope.colours || angular.copy(Chart.defaults.global.colours);\n    while (colours.length < scope.data.length) {\n      colours.push(scope.getColour());\n    }\n    return colours.map(convertColour);\n  }\n\n  function convertColour (colour) {\n    if (typeof colour === 'object' && colour !== null) return colour;\n    if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\n    return getRandomColour();\n  }\n\n  function getRandomColour () {\n    var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n    return getColour(colour);\n  }\n\n  function getColour (colour) {\n    return {\n      fillColor: rgba(colour, 0.2),\n      strokeColor: rgba(colour, 1),\n      pointColor: rgba(colour, 1),\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: rgba(colour, 0.8)\n    };\n  }\n\n  function getRandomInt (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n  }\n\n  function getDataSets (labels, data, series, colours) {\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = angular.copy(colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function getData (labels, data, colours) {\n    return labels.map(function (label, i) {\n      return {\n        label: label,\n        value: data[i],\n        color: colours[i].strokeColor,\n        highlight: colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n  function setLegend (elem, chart) {\n    var $parent = elem.parent(),\n        $oldLegend = $parent.find('chart-legend'),\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\n    else $parent.append(legend);\n  }\n\n  function updateChart (chart, values, scope) {\n    if (Array.isArray(scope.data[0])) {\n      chart.datasets.forEach(function (dataset, i) {\n        (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n          dataItem.value = values[i][j];\n        });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n    scope.$emit('update', chart);\n  }\n\n  function isEmpty (value) {\n    return ! value ||\n      (Array.isArray(value) && ! value.length) ||\n      (typeof value === 'object' && ! Object.keys(value).length);\n  }\n\n  // Credit: http://stackoverflow.com/a/11508164/1190235\n  function hexToRgb (hex) {\n    var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n    return [r, g, b];\n  }\n\n})();\n"],"sourceRoot":"/source/"}